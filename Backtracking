import java.util.Random;
import java.util.Scanner;

public class Clue {	
	static int matriz[][] = {{1,2,3,4,5,6,7},//Matriz de cartas
							{1,2,3,4,5,6,7,8},
							{1,2,3,4,5,6},
							{1,2,3,4,5,6},
							{1,2,3,4,5,6,7,8,9},
							{0}};
	//Array de sospechoso
	static String Sospechosos[] = {"El/la mejor amigo(a)","El/la novio(a)","El/la vecino(a)","El mensajero","El extraño","El/la hermanastro(a)","El/la colega de trabajo"};
	static String Armas[] = {"Pistola","Cuchillo","Machete","Pala","Bate","Botella","Tubo","Cuerda"};//Array de armas
	static String Motivos[] = {"Venganza","Celos","Dinero","Accidente","Drogas","Robo"};//Array de motivos
	static String ParteCuerpo[] = {"Cabeza","Pecho","Abdomen","Espalda","Piernas","Brazos"};//Array de partes del cuerpo
	static String Lugares[] = {"Sala","Comedor","Baño","Terraza","Cuarto","Garage","Patio","Balcon","Cocina"};//Array lugares
	static int asesino[] = {0,0,0,0,0};//Array del resultado ganador
	static int restriccion[][][];//Array de arrays donde estan las parejas restringidas
	public static void Seleccionar(int matriz[][]){//Selecciona la combinacion a buscar y la ingresa en asesino	
		Random rand = new Random();
		for (int i = 0; i < 5;i++) {
			int limite = matriz[i].length;//Establece el limite para generar los random
			int seleccionado = rand.nextInt(limite);//Escoge un indice random de una fila de la matriz
			asesino[i] = matriz[i][seleccionado];//Ingresa la carta random a asesino
		}
	}
	public static void Restricciones(int parejas) {//Escoge las parejas restringidas
		Random rand = new Random();
		int newpareja[][][] = new int[parejas][2][2]; //El primer[] es la cantidad de parejas, el segundo[] es para indicar la fila de la matriz y el dato y la tercera es para la fila en la matriz y el dato de la pareja
		for (int i = 0; i < parejas;i++) {
			int seccion1 = rand.nextInt(5);//Escoge una seccion random osea escoge sospechoso,armas etc
			int seccion2 = rand.nextInt(5);//Escoge otra seccion random osea escoge sospechoso,armas etc
			newpareja[i][0][0] = seccion1;//La ingresa en el campo de fila
			newpareja[i][1][0] = seccion2;//La ingresa en el campo fila de la pareja
			newpareja[i][0][1] = matriz[seccion1][rand.nextInt(matriz[seccion1].length)];//Ingresa el dato restringido 1
			newpareja[i][1][1] = matriz[seccion2][rand.nextInt(matriz[seccion2].length)];//Ingresa el dato restringido 2 apartir de ahora estos dos datos no pueden ir juntos
		}
		restriccion = newpareja;//Ingresa los datos en restriccion
	}
	public static boolean isSafe(int clasificacion,int select,int sol[]) {//Se asegura que el dato escogido no sea uno que haya sido descartado
		if (matriz[clasificacion][select] == -1)//Si fue descartado return false
			return false;
		return true;
	}
	public static boolean SuggestSol() {//Funcion para solucionar el cluedo
		int Sol[] = {0,0,0,0,0,0};//Array donde se guarda la posible solucion
		if (SuggestUtil(0,Sol) == false) {//Si no existe una combinacion correcta
			System.out.print("No existe solucion");
			return false;
		}
		printSolucion(Sol);//Imprimir la solucion en caso de que exista una solucion correcta
		return true;
	}
	private static void printSolucion(int[] sol) {//Imprime la solucion
		System.out.println("Solucion");
		System.out.println(Sospechosos[sol[0]-1]);
		System.out.println(Armas[sol[1]-1]);
		System.out.println(Motivos[sol[2]-1]);
		System.out.println(ParteCuerpo[sol[3]-1]);
		System.out.println(Lugares[sol[4]-1]);
	}
	private static void Eliminar() {//Elimina una carta incorrecta de manera aleatoria
		Random rand = new Random();
		int seccion = rand.nextInt(5);//Escoge de que seccion se va a eliminar
		int carta = rand.nextInt(matriz[seccion].length);//Escoge la carta a eliminar
		if (matriz[seccion][carta] != -1) {//Si no es una carta eliminada
			if(matriz[seccion][carta] != asesino[seccion]) {//Si no es una carta de la solucion
				System.out.print("Eliminado: ");
				System.out.print(seccion);
				System.out.print("-");
				System.out.println(carta);//Indica que seccion y que carta se elimino
				matriz[seccion][carta] = -1;//Elimina la carta
			}
		}
	}
	private static boolean SuggestUtil(int i,int sol[]) {//Algoritmo de bactracking para solucionar el cluedo
		if (i > 5) {//Si tiene un posible resultado
			Eliminar();//Elimine una incorrecta y luego imprime sugerencia
			System.out.println("Sugerencia");
			System.out.println(Sospechosos[sol[0]-1]);
			System.out.println(Armas[sol[1]-1]);
			System.out.println(Motivos[sol[2]-1]);
			System.out.println(ParteCuerpo[sol[3]-1]);
			System.out.println(Lugares[sol[4]-1]);
			return true;
		}
		for (int j = 0; j < matriz[i].length;j++) {//For para que pase a la siguiente carta en caso de estar en el camino incorrecto
			if (isSafe(i,j,sol)) {//Si la carta no esta eliminada
				sol[i] = matriz[i][j];//Ingresa el dato a la posible solucion
				if (VerResticcion(sol)) {//Se asegura que el dato ingresado no sea una pareja de restriccion
					return false;
				}
				if (SuggestUtil(i+1,sol)) {//Se mueve a probar la siguiente seccion
					if (Verificar(sol))//Si es la combinacion ganadora
						return true;
					return false;//Continue las sugerencial
				}
				sol[i] = 0;//En caso de no ser ninguna de las anteriores convierta en cero la opcion
			}
		}
		return false;
	}
	private static boolean VerResticcion(int[] sol) {//Se asegura que en la posible solucion no haya parejas restringidas
		for (int i = 0; i < restriccion.length;i++) {//Pasa por todas las parejas restringidas
			//Si existen parejas restringidas en la solucion retorne true
			if (sol[restriccion[i][0][0]] == restriccion[i][0][1] && sol[restriccion[i][1][0]] == restriccion[i][1][1]) {
				return true;
			}
		}
		return false;
	}
	private static boolean Verificar(int sol[]) {//Verifica si la posible solucion es la correcta
		if (sol.length < 5)//Se asegura que la posible solucion sea del largo correcto
			return false;
		for(int i = 0; i < 5;i++) {//Compara la posible solucion con la solucion correcta
			if(sol[i] != asesino[i]){
				return false;
			}
		}
		return true;
	}
	public static void main(String args[]){
		Seleccionar(matriz);//Selecciona de manera random la combinacion ganadora
		Scanner scanner = new Scanner(System.in);//Input para que ingrese el numero de parejas que quiere restringir
		System.out.println("Digite la cantidad de parejas que quiere restringir: ");
		int input = scanner.nextInt();
		Restricciones(input);//Genera las parejas de restricciones
		SuggestSol();//Resuelve el juego
	}
}
